/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import * as l10n from "@vscode/l10n";

export const colorFunctions = [
	{
		label: "rgb",
		func: "rgb($red, $green, $blue)",
		insertText: "rgb(${1:red}, ${2:green}, ${3:blue})",
		desc: l10n.t("Creates a Color from red, green, and blue values."),
	},
	{
		label: "rgba",
		func: "rgba($red, $green, $blue, $alpha)",
		insertText: "rgba(${1:red}, ${2:green}, ${3:blue}, ${4:alpha})",
		desc: l10n.t("Creates a Color from red, green, blue, and alpha values."),
	},
	{
		label: "rgb relative",
		func: "rgb(from $color $red $green $blue)",
		insertText: "rgb(from ${1:color} ${2:r} ${3:g} ${4:b})",
		desc: l10n.t(
			"Creates a Color from the red, green, and blue values of another Color.",
		),
	},
	{
		label: "hsl",
		func: "hsl($hue, $saturation, $lightness)",
		insertText: "hsl(${1:hue}, ${2:saturation}, ${3:lightness})",
		desc: l10n.t("Creates a Color from hue, saturation, and lightness values."),
	},
	{
		label: "hsla",
		func: "hsla($hue, $saturation, $lightness, $alpha)",
		insertText: "hsla(${1:hue}, ${2:saturation}, ${3:lightness}, ${4:alpha})",
		desc: l10n.t(
			"Creates a Color from hue, saturation, lightness, and alpha values.",
		),
	},
	{
		label: "hsl relative",
		func: "hsl(from $color $hue $saturation $lightness)",
		insertText: "hsl(from ${1:color} ${2:h} ${3:s} ${4:l})",
		desc: l10n.t(
			"Creates a Color from the hue, saturation, and lightness values of another Color.",
		),
	},
	{
		label: "hwb",
		func: "hwb($hue $white $black)",
		insertText: "hwb(${1:hue} ${2:white} ${3:black})",
		desc: l10n.t("Creates a Color from hue, white, and black values."),
	},
	{
		label: "hwb relative",
		func: "hwb(from $color $hue $white $black)",
		insertText: "hwb(from ${1:color} ${2:h} ${3:w} ${4:b})",
		desc: l10n.t(
			"Creates a Color from the hue, white, and black values of another Color.",
		),
	},
	{
		label: "lab",
		func: "lab($lightness $a $b)",
		insertText: "lab(${1:lightness} ${2:a} ${3:b})",
		desc: l10n.t("Creates a Color from lightness, a, and b values."),
	},
	{
		label: "lab relative",
		func: "lab(from $color $lightness $a $b)",
		insertText: "lab(from ${1:color} ${2:l} ${3:a} ${4:b})",
		desc: l10n.t(
			"Creates a Color from the lightness, a, and b values of another Color.",
		),
	},
	{
		label: "oklab",
		func: "oklab($lightness $a $b)",
		insertText: "oklab(${1:lightness} ${2:a} ${3:b})",
		desc: l10n.t("Creates a Color from lightness, a, and b values."),
	},
	{
		label: "oklab relative",
		func: "oklab(from $color $lightness $a $b)",
		insertText: "oklab(from ${1:color} ${2:l} ${3:a} ${4:b})",
		desc: l10n.t(
			"Creates a Color from the lightness, a, and b values of another Color.",
		),
	},
	{
		label: "lch",
		func: "lch($lightness $chroma $hue)",
		insertText: "lch(${1:lightness} ${2:chroma} ${3:hue})",
		desc: l10n.t("Creates a Color from lightness, chroma, and hue values."),
	},
	{
		label: "lch relative",
		func: "lch(from $color $lightness $chroma $hue)",
		insertText: "lch(from ${1:color} ${2:l} ${3:c} ${4:h})",
		desc: l10n.t(
			"Creates a Color from the lightness, chroma, and hue values of another Color.",
		),
	},
	{
		label: "oklch",
		func: "oklch($lightness $chroma $hue)",
		insertText: "oklch(${1:lightness} ${2:chroma} ${3:hue})",
		desc: l10n.t("Creates a Color from lightness, chroma, and hue values."),
	},
	{
		label: "oklch relative",
		func: "oklch(from $color $lightness $chroma $hue)",
		insertText: "oklch(from ${1:color} ${2:l} ${3:c} ${4:h})",
		desc: l10n.t(
			"Creates a Color from the lightness, chroma, and hue values of another Color.",
		),
	},
	{
		label: "color",
		func: "color($color-space $red $green $blue)",
		insertText:
			"color(${1|srgb,srgb-linear,display-p3,a98-rgb,prophoto-rgb,rec2020,xyx,xyz-d50,xyz-d65|} ${2:red} ${3:green} ${4:blue})",
		desc: l10n.t(
			"Creates a Color in a specific color space from red, green, and blue values.",
		),
	},
	{
		label: "color relative",
		func: "color(from $color $color-space $red $green $blue)",
		insertText:
			"color(from ${1:color} ${2|srgb,srgb-linear,display-p3,a98-rgb,prophoto-rgb,rec2020,xyx,xyz-d50,xyz-d65|} ${3:r} ${4:g} ${5:b})",
		desc: l10n.t(
			"Creates a Color in a specific color space from the red, green, and blue values of another Color.",
		),
	},
	{
		label: "color-mix",
		func: "color-mix(in $color-space, $color $percentage, $color $percentage)",
		insertText:
			"color-mix(in ${1|srgb,srgb-linear,lab,oklab,xyz,xyz-d50,xyz-d65|}, ${3:color} ${4:percentage}, ${5:color} ${6:percentage})",
		desc: l10n.t("Mix two colors together in a rectangular color space."),
	},
	{
		label: "color-mix hue",
		func: "color-mix(in $color-space $interpolation-method hue, $color $percentage, $color $percentage)",
		insertText:
			"color-mix(in ${1|hsl,hwb,lch,oklch|} ${2|shorter hue,longer hue,increasing hue,decreasing hue|}, ${3:color} ${4:percentage}, ${5:color} ${6:percentage})",
		desc: l10n.t("Mix two colors together in a polar color space."),
	},
];

export const colors: { [name: string]: string } = {
	aliceblue: "#f0f8ff",
	antiquewhite: "#faebd7",
	aqua: "#00ffff",
	aquamarine: "#7fffd4",
	azure: "#f0ffff",
	beige: "#f5f5dc",
	bisque: "#ffe4c4",
	black: "#000000",
	blanchedalmond: "#ffebcd",
	blue: "#0000ff",
	blueviolet: "#8a2be2",
	brown: "#a52a2a",
	burlywood: "#deb887",
	cadetblue: "#5f9ea0",
	chartreuse: "#7fff00",
	chocolate: "#d2691e",
	coral: "#ff7f50",
	cornflowerblue: "#6495ed",
	cornsilk: "#fff8dc",
	crimson: "#dc143c",
	cyan: "#00ffff",
	darkblue: "#00008b",
	darkcyan: "#008b8b",
	darkgoldenrod: "#b8860b",
	darkgray: "#a9a9a9",
	darkgrey: "#a9a9a9",
	darkgreen: "#006400",
	darkkhaki: "#bdb76b",
	darkmagenta: "#8b008b",
	darkolivegreen: "#556b2f",
	darkorange: "#ff8c00",
	darkorchid: "#9932cc",
	darkred: "#8b0000",
	darksalmon: "#e9967a",
	darkseagreen: "#8fbc8f",
	darkslateblue: "#483d8b",
	darkslategray: "#2f4f4f",
	darkslategrey: "#2f4f4f",
	darkturquoise: "#00ced1",
	darkviolet: "#9400d3",
	deeppink: "#ff1493",
	deepskyblue: "#00bfff",
	dimgray: "#696969",
	dimgrey: "#696969",
	dodgerblue: "#1e90ff",
	firebrick: "#b22222",
	floralwhite: "#fffaf0",
	forestgreen: "#228b22",
	fuchsia: "#ff00ff",
	gainsboro: "#dcdcdc",
	ghostwhite: "#f8f8ff",
	gold: "#ffd700",
	goldenrod: "#daa520",
	gray: "#808080",
	grey: "#808080",
	green: "#008000",
	greenyellow: "#adff2f",
	honeydew: "#f0fff0",
	hotpink: "#ff69b4",
	indianred: "#cd5c5c",
	indigo: "#4b0082",
	ivory: "#fffff0",
	khaki: "#f0e68c",
	lavender: "#e6e6fa",
	lavenderblush: "#fff0f5",
	lawngreen: "#7cfc00",
	lemonchiffon: "#fffacd",
	lightblue: "#add8e6",
	lightcoral: "#f08080",
	lightcyan: "#e0ffff",
	lightgoldenrodyellow: "#fafad2",
	lightgray: "#d3d3d3",
	lightgrey: "#d3d3d3",
	lightgreen: "#90ee90",
	lightpink: "#ffb6c1",
	lightsalmon: "#ffa07a",
	lightseagreen: "#20b2aa",
	lightskyblue: "#87cefa",
	lightslategray: "#778899",
	lightslategrey: "#778899",
	lightsteelblue: "#b0c4de",
	lightyellow: "#ffffe0",
	lime: "#00ff00",
	limegreen: "#32cd32",
	linen: "#faf0e6",
	magenta: "#ff00ff",
	maroon: "#800000",
	mediumaquamarine: "#66cdaa",
	mediumblue: "#0000cd",
	mediumorchid: "#ba55d3",
	mediumpurple: "#9370d8",
	mediumseagreen: "#3cb371",
	mediumslateblue: "#7b68ee",
	mediumspringgreen: "#00fa9a",
	mediumturquoise: "#48d1cc",
	mediumvioletred: "#c71585",
	midnightblue: "#191970",
	mintcream: "#f5fffa",
	mistyrose: "#ffe4e1",
	moccasin: "#ffe4b5",
	navajowhite: "#ffdead",
	navy: "#000080",
	oldlace: "#fdf5e6",
	olive: "#808000",
	olivedrab: "#6b8e23",
	orange: "#ffa500",
	orangered: "#ff4500",
	orchid: "#da70d6",
	palegoldenrod: "#eee8aa",
	palegreen: "#98fb98",
	paleturquoise: "#afeeee",
	palevioletred: "#d87093",
	papayawhip: "#ffefd5",
	peachpuff: "#ffdab9",
	peru: "#cd853f",
	pink: "#ffc0cb",
	plum: "#dda0dd",
	powderblue: "#b0e0e6",
	purple: "#800080",
	red: "#ff0000",
	rebeccapurple: "#663399",
	rosybrown: "#bc8f8f",
	royalblue: "#4169e1",
	saddlebrown: "#8b4513",
	salmon: "#fa8072",
	sandybrown: "#f4a460",
	seagreen: "#2e8b57",
	seashell: "#fff5ee",
	sienna: "#a0522d",
	silver: "#c0c0c0",
	skyblue: "#87ceeb",
	slateblue: "#6a5acd",
	slategray: "#708090",
	slategrey: "#708090",
	snow: "#fffafa",
	springgreen: "#00ff7f",
	steelblue: "#4682b4",
	tan: "#d2b48c",
	teal: "#008080",
	thistle: "#d8bfd8",
	tomato: "#ff6347",
	turquoise: "#40e0d0",
	violet: "#ee82ee",
	wheat: "#f5deb3",
	white: "#ffffff",
	whitesmoke: "#f5f5f5",
	yellow: "#ffff00",
	yellowgreen: "#9acd32",
};

export const colorKeywords: { [name: string]: string } = {
	currentColor:
		"The value of the 'color' property. The computed value of the 'currentColor' keyword is the computed value of the 'color' property. If the 'currentColor' keyword is set on the 'color' property itself, it is treated as 'color:inherit' at parse time.",
	transparent:
		"Fully transparent. This keyword can be considered a shorthand for rgba(0,0,0,0) which is its computed value.",
};
